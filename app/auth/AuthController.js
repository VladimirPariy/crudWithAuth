import bcrypt from 'bcryptjs'import AuthService from "./AuthService.js";import {validationResult} from "express-validator";import jwt from 'jsonwebtoken';import {secret} from "../config.js";class AuthController {  async registration(req, res) {    try {      const validationError = validationResult(req)      if (!validationError.isEmpty()) {        return res.status(400).json({errors: validationError.array(), message: 'Ошибка при регистрации'});      }      const {name, pass, email} = req.body;      const candidate = await AuthService.getUserByNameOrEmail(name, email)      if (candidate.length) {        return res.status(400).json({message: 'User already exists'});      }      const encryptedPass = await bcrypt.hashSync(pass, 7);      await AuthService.registration(name, email, encryptedPass);      return res.json({message: 'User successfully registered'});    } catch (e) {      res.status(500).json(e.message);    }  }  async login(req, res) {    try {      const {name, email, pass} = req.body;      const user = await AuthService.getUserByNameOrEmail(name, email);      if (!user) return res.status(400).json({message: 'Пользователь не найден'})      const validPass = bcrypt.compareSync(pass, user[0].pass)      if (!validPass) {        return res.status(400).json({message: 'Неверный пароль'})      }      const token = jwt.sign({user_id: user[0].insertId, email}, secret, {expiresIn: "2h"})      return res.json({token})    } catch (e) {      res.status(500).json(e.message);    }  }}export default new AuthController();