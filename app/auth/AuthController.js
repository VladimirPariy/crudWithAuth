import bcrypt from 'bcryptjs'import AuthService from "./AuthService.js";import {validationResult} from "express-validator";import jwt from 'jsonwebtoken';import {secret} from "../config.js";import {logger} from "../logging.js";class AuthController {    async registration(req, res) {        try {            const {name, pass, email} = req.body;            const validationError = validationResult(req);            if (!validationError.isEmpty()) {                logger.error(`User with ${name} and email ${email} does not inputted password`);                return res.status(400).json({errors: validationError.array(), message: 'Password cannot be empty.'});            }            const candidate = await AuthService.getUserByNameOrEmail(name, email);            if (candidate.length) {                logger.error(`User with ${name} and email ${email} already exists`);                return res.status(400).json({message: 'User already exists'});            }            const encryptedPass = await bcrypt.hashSync(pass, 7);            await AuthService.registration(name, email, encryptedPass);            logger.info(`User with name ${name} and email ${email} successfully registered`);            return res.json({message: 'User successfully registered'});        } catch (e) {            res.status(500).json(e.message);            logger.error(e.message);        }    }    async login(req, res) {        try {            const {name, email, pass} = req.body;            const user = await AuthService.getUserByNameOrEmail(name, email);            if (user.length < 1) {                logger.error(`User with name ${name} and email ${email} is not found`);                return res.status(400).json({message: `User is not found`})            }            const validPass = bcrypt.compareSync(pass, user[0].pass)            if (!validPass) {                logger.error(`User with name ${name} and email ${email} inputted invalid password`);                return res.status(400).json({message: `User inputted invalid password`})            }            const token = jwt.sign({user_id: user[0].insertId, email}, secret, {expiresIn: "2h"})            logger.info(`User with name ${name} or email ${email} authorization`);            return res.json({token})        } catch (e) {            logger.error(e.message);            res.status(500).json(e.message);        }    }}export default new AuthController();