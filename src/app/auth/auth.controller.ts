import bcrypt from 'bcryptjs'import {validationResult} from "express-validator";import {Response, Request} from "express";import AuthModel from "./auth.service";import {logger} from "../logging";class AuthController {	async registration(req: Request, res: Response) {		try {			const {login, password, email} = req.body;						const validationError = validationResult(req);			if (!validationError.isEmpty()) {				logger.error(validationError.array()[0].msg);				return res.status(400).json({errors: validationError.array});			}						const candidate = await AuthModel.getUserByNameOrEmail(login, email);			if (candidate.length) {				logger.error(`User with ${login} and email ${email} already exists`);				return res.status(400).json({message: 'User already exists'});			}						await AuthModel.registration(login, email, password);						logger.info(`User with name ${login} and email ${email} successfully registered`);			return res.json({message: 'User successfully registered'});		} catch (e) {			if (e instanceof Error) {				logger.error(e.message);				res.status(500).json(e.message);			}		}	}		async login(req: Request, res: Response) {		try {			const {login, email, password} = req.body;						const user = await AuthModel.getUserByNameOrEmail(login, email);						if (user.length < 1) {				logger.error(`User with name ${login} and email ${email} is not found`);				return res.status(400).json({message: `User is not found`})			}						const validPassword = bcrypt.compareSync(password, user[0].password)						if (!validPassword) {				logger.error(`User with name ${login} and email ${email} inputted invalid password`);				return res.status(400).json({message: `User inputted invalid password`})			}						const token = await AuthModel.getToken(user[0]._id)			console.log(token)						logger.info(`User with name ${login} or email ${email} authorization`);			return res.json({token})		} catch (e) {			if (e instanceof Error) {				logger.error(e.message);				res.status(500).json(e.message);			}		}	}}export default new AuthController();