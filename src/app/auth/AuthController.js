import bcrypt from 'bcryptjs'import AuthService from "./AuthService.js";import {validationResult} from "express-validator";import jwt from 'jsonwebtoken';import {secret} from "../secret.js";import {logger} from "../logging.js";class AuthController {  async registration(req, res) {    try {      const {login, password, email} = req.body;      const validationError = validationResult(req);      if (!validationError.isEmpty()) {        logger.error(`User with ${login} and email ${email} does not inputted password`);        return res.status(400).json({errors: validationError.array, message: 'Password cannot be empty.'});      }      const candidate = await AuthService.getUserByNameOrEmail(login, email);      if (candidate.length) {        logger.error(`User with ${login} and email ${email} already exists`);        return res.status(400).json({message: 'User already exists'});      }      const encryptedPass = await bcrypt.hashSync(password, 7);      await AuthService.registration(login, email, encryptedPass);      logger.info(`User with name ${login} and email ${email} successfully registered`);      return res.json({message: 'User successfully registered'});    } catch (e) {      res.status(500).json(e.message);      logger.error(e.message);    }  }  async login(req, res) {    try {      const {login, email, password} = req.body;      const user = await AuthService.getUserByNameOrEmail(login, email);      if (user.length < 1) {        logger.error(`User with name ${login} and email ${email} is not found`);        return res.status(400).json({message: `User is not found`})      }      const validPassword = bcrypt.compareSync(password, user[0].password)      if (!validPassword) {        logger.error(`User with name ${login} and email ${email} inputted invalid password`);        return res.status(400).json({message: `User inputted invalid password`})      }      const token = jwt.sign({_id: user._id, email}, secret, {expiresIn: "2h"})      logger.info(`User with name ${login} or email ${email} authorization`);      return res.json({token})    } catch (e) {      logger.error(e.message);      res.status(500).json(e.message);    }  }}export default new AuthController();