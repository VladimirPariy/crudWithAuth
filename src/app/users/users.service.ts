import bcrypt from "bcryptjs";import {UsersDbModel} from "../../DB/models/users.dbmodel";export interface IUserInfo {  _id:string;  password?:string;  login?:string;  email?:string;}class UsersService {  async getAll() {    return UsersDbModel.query()  }  async getOneById(id:string) {    return UsersDbModel.query()      .findById(id)  }  async update(userInfo:IUserInfo) {    if (!userInfo._id) throw new Error('No id');    if (userInfo.password) userInfo.password = bcrypt.hashSync(userInfo.password, 7);    const {_id: userID, ...reqBodyWithoutID} = userInfo    return UsersDbModel.query()      .patchAndFetchById(userID, reqBodyWithoutID)  }  async deleteAll() {    return UsersDbModel.query()      .delete()  }  async deleteOne(id:string) {    return UsersDbModel.query()      .deleteById(id)  }}export default new UsersService();