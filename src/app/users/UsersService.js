import {connection} from "../db.js";import bcrypt from "bcryptjs";class UsersService {	async getAll() {		const allUsers = await connection.query('SELECT * FROM users');		return allUsers[0];	}	async getOneById(id) {		const oneUserById = await connection.query('SELECT * FROM users WHERE users_id=?', id);		return oneUserById[0];	}	async create(userInfo) {		const {name, email, pass} = userInfo;		let userInfoForCreating = [];		if (!name || !email || !pass) throw new Error('Отсутствует одно из обязательных полей');		else {			const encryptedPass = await bcrypt.hashSync(pass, 7);			userInfoForCreating = [name, email, encryptedPass];		}		const user = await connection.query('INSERT INTO users (name, email, pass) VALUES (?,?,?)', userInfoForCreating);		return user;	}	async update(user) {		if (!user.users_id) throw new Error('No id');		if (user.pass) {			const encryptedPass = await bcrypt.hashSync(user.pass, 7);			user.pass = encryptedPass		}		const infoForUpdate = await getInfoForUpdate(user);		const updatedUser = await connection.query(infoForUpdate.sqlCommand, infoForUpdate.valueForUpdate);		return updatedUser;	}	async deleteAll() {		const deleteAllUser = await connection.query('DELETE FROM users');		return deleteAllUser;	}	async deleteOne(id) {		const deleteOneUser = await connection.query('DELETE FROM users WHERE users_id=?', id);		return deleteOneUser;	}}async function getInfoForUpdate(reqBody) {	let sqlCommand = `UPDATE users SET WHERE users_id=?`;	let keyForSearch = [];	let keyForUpdate = [];	let valueForUpdate = [];	for (let item in reqBody) {		if (item === 'users_id') keyForSearch.push(reqBody[item]);		else {			keyForUpdate.push(` ${item}=?`);			valueForUpdate.push(reqBody[item]);		}	}	valueForUpdate.push(...keyForSearch);	keyForUpdate = keyForUpdate.join(',');	let sqlCommandArr = sqlCommand.split(' ');	const index = sqlCommandArr.indexOf('WHERE');	sqlCommandArr.splice(index, 0, keyForUpdate);	sqlCommand = sqlCommandArr.join(' ');	return {sqlCommand, valueForUpdate};}export default new UsersService();