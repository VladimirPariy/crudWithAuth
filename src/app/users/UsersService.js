import bcrypt from "bcryptjs";import {knexInstance} from "../../DB/knex.js";class UsersService {	async getAll() {    return  knexInstance('users').select('*');	}	async getOneById(id) {		return knexInstance('users').where({_id:id});	}	async update(user) {		if (!user.users_id) throw new Error('No id');		if (user.pass) {			const encryptedPass = await bcrypt.hashSync(user.password, 7);			user.pass = encryptedPass		}		const infoForUpdate = await getInfoForUpdate(user);		// const updatedUser = await connection.query(infoForUpdate.sqlCommand, infoForUpdate.valueForUpdate);		// return updatedUser;	}	async deleteAll() {    return knexInstance('users').del();	}	async deleteOne(id) {    return knexInstance('users').where({_id: id}).del();	}}async function getInfoForUpdate(reqBody) {	let sqlCommand = `UPDATE users SET WHERE users_id=?`;	let keyForSearch = [];	let keyForUpdate = [];	let valueForUpdate = [];	for (let item in reqBody) {		if (item === 'users_id') keyForSearch.push(reqBody[item]);		else {			keyForUpdate.push(` ${item}=?`);			valueForUpdate.push(reqBody[item]);		}	}	valueForUpdate.push(...keyForSearch);	keyForUpdate = keyForUpdate.join(',');	let sqlCommandArr = sqlCommand.split(' ');	const index = sqlCommandArr.indexOf('WHERE');	sqlCommandArr.splice(index, 0, keyForUpdate);	sqlCommand = sqlCommandArr.join(' ');	return {sqlCommand, valueForUpdate};}export default new UsersService();